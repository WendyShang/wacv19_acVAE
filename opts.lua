local M = { }

function M.parse(arg)
   local cmd = torch.CmdLine()
   cmd:text()
   cmd:text('Torch-7 crVAE Training script')
   cmd:text()
   cmd:text('Options:')
   cmd:option('-data',          '/var/scratch/wshang/celebA/',         'Path to dataset')
   cmd:option('-dataset',       'celeba',   'Options: celeba ')
   cmd:option('-cudnn',         'fastest',  'Options: fastest | deterministic')
   cmd:option('-manualSeed',    1208,       'Manually set RNG seed')
   cmd:option('-nEpochs',       150,        'Number of total epochs to run')
   cmd:option('-nGPU',          1,          'Number of GPUs')
   cmd:option('-epochStep',     25,         'Number of steps to save model')
   cmd:option('-step',          50,         'Number of steps to reduce LR')
   cmd:option('-epochNumber',   1,          'Manual epoch number (useful on restarts)')
   cmd:option('-batchSize',     128,        'mini-batch size (1 = pure stochastic)')
   cmd:option('-baseChannels',  32,         'Number of startup conv channels')
   cmd:option('-bias',          'true',     'Use bias or not for cnn parts')
   cmd:option('-save',          '',         'Save dir')
   cmd:option('-max_alpha',     1,          'maximum contribution from convolution branch')
   cmd:option('-alpha',         1,          'Contribution of KL term')
   cmd:option('-alpha1',        0,          'Contribution of first half KL term')
   cmd:option('-alpha2',        0,          'Contribution of second half KL term')
   cmd:option('-beta',          0,          'Contribution of discriminative loss to decoder')
   cmd:option('-kappa',         0,          'Contribution of MI')
   cmd:option('-rho',           0.0,        'Contribution of doubly stochastic')
   cmd:option('-rho_entreg',    0.0,        'Contribution of entropy regularization')
   cmd:option('-margin',        0.1,        'Margin to train discriminator')
   cmd:option('-nThreads',        4,        'number of data loading threads')
   cmd:option('-fakeLabel',     4,          'Every fakeLabel number of examples would be a fake one')
   cmd:option('-nf',            64,         'Number of filters')
   cmd:option('-timeStep',      8,          'Number of time steps (only 8 is allowed)')
   --cmd:option('-dropout',       0,          'Dropout for RNN part')
   cmd:option('-LR',            0.003,      'Initial learning rate')
   cmd:option('-LR_mult',       1.0,        'Learning rate for PGGAN')
   cmd:option('-optimization',  'adam',     'Optimization method')
   cmd:option('-grad_clip',     5,          'Grad clip for RNN')
   cmd:option('-eps',           1e-5,       'Eps for BN')
   cmd:option('-mom',           0.1,        'Momentum for BN')
   cmd:option('-beta1',         0.9,        'Beta1 for BN')
   cmd:option('-netType',       'allconv',  'allconv is the only option')
   cmd:option('-latentType',    'cvae',     'cvae|cgan|cvaegan|crvaegan|acvaegan')
   --cmd:option('-rnnLayer',      2,          'Number of Rnn Layers')
   cmd:option('-init_weight_from',   'none',     'Path to model to retrain with')
   cmd:option('-init_state_from',    'none',     'Path to model to retrain with')
   cmd:option('-retrain',       'none',     'Path to model to retrain with')
   cmd:option('-optimState',    'none',     'Path to an optimState to reload from')
   cmd:option('-stage1',        'none',     'Path to a stage 1 model')
   cmd:option('-decayLR',       0.5,        'Learning rate decay rate')
   cmd:option('-attrDim',       40,         'Dimension of attribute vector')
   cmd:option('-noise',         'normal',   'Noise for GAN training')
   --cmd:option('-discRatio',     3,          'train discRatio number of generation then train disc once')
   cmd:option('-gen',           'gen',      'Path to save generated files')
   cmd:option('-stage',         1,          'choose which state of the training')
   cmd:option('-print_freq',    10,         'print frequency')
   cmd:text()

   local opt = cmd:parse(arg or {})
   opt.bias = opt.bias ~= 'false'
   if opt.alpha1 == 0   then opt.alpha1   = nil    end
   if opt.alpha2 == 0   then opt.alpha2   = nil    end
   return opt
end

return M
